#include <stdio.h>
#include <string.h>
#include <ruby.h>

%%{
  machine feature;
  
  action begin_content {
    printf("begin_content\n");
  }
  
  action begin_pystring {
    printf("begin_pystring\n");
  }
  
  action start_pystring {
    printf("start_pystring\n");
  }
  
  action start_line {
    printf("start_line\n");
  }
  
  action end_line {
    printf("end_line\n");
  }
  
  action store_feature_content {
    printf("store_feature_content\n");
  }
  
  action store_background_content {
    printf("store_background_content\n");
  }
  
  action store_scenario_content {
    printf("store_scenario_content\n");
  }
  
  action store_scenario_outline_content {
    printf("store_scenario_outline_content\n");
  }
  
  action store_examples_content {
    printf("store_examples_content\n");
  }
  
  action store_step_content {
    printf("store_step_content\n");
  }
  
  action store_comment_content {
    printf("store_comment_content\n");
  }
  
  action store_tag_content {
    printf("store_tag_content\n");
    rb_funcall(listener, rb_intern("tag"), 0);
  }
  
  action store_pystring_content {
    printf("store_pystring_content\n");
  }
  
  action inc_line_number {
    printf("inc_line_number\n");
  }
    
  action last_newline {
    printf("last_newline\n");
  }
  
  action start_keyword {
    printf("start_keyword\n");
  }
  
  action end_keyword {
    printf("end_keyword\n");
  }
  
  action next_keyword_start {
    printf("next_keyword_start\n");
  }
  
  action end_table {
    printf("end_table\n");
  }
 
  action end_feature {
    printf("end_feature\n");
  }
  
  include parser_common "parser_common.<%= i18n_language %>.rl"; 
}%%

%% write data;

static VALUE mGherkin;
static VALUE mParser;
static VALUE cFeature;

static VALUE Feature_init(VALUE self, VALUE listener)
{
  rb_iv_set(self, "@listener", listener);
  return self;
}

static VALUE Feature_scan(VALUE self, VALUE text)
{
  int cs;
  char *p = RSTRING(text)->ptr;
  char *pe = p + strlen(p);
  char *eof = pe;
  
  VALUE listener = rb_iv_get(self, "@listener");
  
  %%{
    write init;
    write exec;
  }%%
  
  return Qnil;
}

void Init_feature() {
  mGherkin = rb_define_module("Gherkin");
  mParser = rb_define_module_under(mGherkin, "Parser");
  cFeature = rb_define_class_under(mParser, "CParser", rb_cObject);
  
  rb_define_method(cCParser, "initialize", Feature_init, 1);
  rb_define_method(cCParser, "scan", Feature_scan, 1);
}
