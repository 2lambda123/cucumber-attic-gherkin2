;(function() {

%%{
  machine lexer;

  action begin_content {
    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  }

  action start_pystring {
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  }
  
  action begin_pystring_content {
    this.content_start = p;
  }

  action store_pystring_content {
    var con = this.unindent(
      this.start_col, 
      data.slice(this.content_start, this.next_keyword_start-1).toString('utf-8').replace(/(\r?\n)?([\t ])*\Z/, '') // TODO .replace(/\"\"\"/mg, '"""')
    );
    this.emit('py_string', con, this.current_line); 
  }

  action store_feature_content {
    p = this.store_keyword_content('feature', data, p, eof);
  }

  action store_background_content {
    p = this.store_keyword_content('background', data, p, eof);
  }

  action store_scenario_content {
    p = this.store_keyword_content('scenario', data, p, eof);
  }

  action store_scenario_outline_content {
    p = this.store_keyword_content('scenario_outline', data, p, eof);
  }

  action store_examples_content {
    p = this.store_keyword_content('examples', data, p, eof);
  }

  action store_step_content {
    var con = data.slice(this.content_start, p).toString('utf-8').trim();
    this.emit('step', this.keyword, con, this.current_line);
  }

  action store_comment_content {
    console.log('TODO: store_comment_content');
  }

  action store_tag_content {
    console.log('TODO: store_tag_content');
  }

  action inc_line_number {
    this.line_number++;
  }

  action last_newline {
    this.last_newline = p + 1;
  }

  action start_keyword {
    this.keyword_start = this.keyword_start || p;
  }

  action end_keyword {
    this.keyword = data.slice(this.keyword_start, p).toString('utf-8').replace(/:$/, '');
    this.keyword_start = null;
  }

  action next_keyword_start {
    this.next_keyword_start = p;
  }

  action start_row {
    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  }

  action begin_cell_content {
    this.content_start = p;
  }

  action store_cell_content {
    var con = data.slice(this.content_start, p).toString('utf-8').trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  }

  action store_row {
    this.emit('row', current_row, this.current_line);
  }

  action end_feature {
    console.log('TODO: end_feature');
  }

  include lexer_common "lexer_common.<%= @i18n.underscored_iso_code %>.rl"; 
}%%

%% write data;
%% access this.;
%% variable data data;

var Lexer = function(listeners) {
  // check that we have an 'on' method (for registering event listeners - Node has that)
  // If not, make a trivial implementation that can register one listener. -Enough for testing.
  
  if(!this.on) {
    this._listeners = {};
    
    this.on = function(event, cb) {
      this._listeners[event] = cb;
    }
  }
  
  var events = ['feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'py_string', 'row', 'end'];
  for(e in events) {
    var event = events[e];
    var listener = listeners[event];
    if(!listener) {
      throw "No listener for " + event;
    }
    this.on(event, listener);
  }

  %% write init;
};

if(typeof require == 'function') {
  require('sys').inherits(Lexer, require('events').EventEmitter);
}

Lexer.prototype.scan = function(data) {
  var p = 0;
  var pe = data.length;
  var eof = 0;

  %% write exec;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, data.slice(this.content_start, end_point).toString('utf-8')).trimRight();
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.emit(event, this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

exports.Lexer = Lexer;

})();