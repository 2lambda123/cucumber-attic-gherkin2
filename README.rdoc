= Gherkin

Fast Gherkin lexer based on Ragel. 

Gherkin is the language that has evolved out of the Cucumber project. Cucumber currently uses
Treetop, which is too slow for larger projects.

This project will *not* include code to build an AST. Instead, this lexer will have an API
that makes it possible to plug in a builder that can build an AST.

== Testing

rake ragel
rake spec cucumber

== Cleaning generated code

rake clobber

== Release process

(We'll put this in a release.sh later)

rvm jruby
rake clobber compile spec cucumber
rvm 1.9
rake clobber compile spec cucumber
rvm 1.8.7
rake clobber compile spec cucumber
rake release
rvm jruby
rake gemspec compile build
gem push pkg/gherkin-0.0.3-universal-java-1.5.gem

TODO: Also build windows gem with dll using rake-compiler. MinGW gem can be done on OS X/Linux, but
the one for the old Ruby one-click installers must be built with Visual Studio/nmake.

== Notes

Ragel supports Ruby, but it's much slower than C. The ruby target will be used for development.
The final version will use C for MRI and Java for JRuby.

== Ragel links

* http://www.complang.org/ragel/
* http://dev.sipdoc.net/attachments/2/ragel_talk.pdf 
* http://lambda-the-ultimate.org/node/1125
* http://www.zedshaw.com/essays/ragel_state_charts.html
* http://www.devchix.com/2008/01/13/a-hello-world-for-ruby-on-ragel-60/

== Note on Patches/Pull Requests
 
* Fork the project.
* Run rake ragel:rb to generate all the I18N lexers
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but
   bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2009 Mike Sassak, Gregory Hnatiuk, Aslak Helles√∏y. See LICENSE for details.
