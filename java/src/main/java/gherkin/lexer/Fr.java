
// line 1 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Fr implements Lexer {
  
// line 150 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"


  private final Listener listener;

  public Fr(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Fr.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
	   31,   32,   33,   36,   38,   40,   60,   61,   62,   64,   66,   71,
	   76,   81,   86,   91,   95,   99,  101,  102,  103,  104,  105,  106,
	  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  122,
	  129,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
	  145,  146,  147,  148,  165,  167,  169,  171,  173,  175,  177,  179,
	  181,  183,  185,  187,  189,  193,  213,  215,  217,  218,  219,  220,
	  221,  222,  223,  224,  225,  226,  233,  235,  237,  239,  241,  243,
	  245,  247,  249,  251,  253,  255,  257,  259,  261,  263,  264,  265,
	  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
	  278,  279,  280,  292,  294,  296,  298,  300,  302,  304,  306,  308,
	  310,  312,  314,  316,  318,  320,  322,  324,  326,  328,  330,  332,
	  334,  336,  338,  340,  342,  344,  346,  348,  350,  352,  354,  356,
	  358,  360,  362,  364,  366,  368,  370,  372,  374,  376,  378,  380,
	  382,  384,  386,  388,  390,  392,  395,  397,  399,  401,  403,  405,
	  407,  409,  411,  412,  413,  414,  415,  416,  418,  419,  420,  421,
	  422,  423,  424,  425,  426,  427,  429,  430,  431,  432,  433,  434,
	  435,  436,  437,  438,  439,  440,  456,  458,  460,  462,  464,  466,
	  468,  470,  472,  474,  476,  478,  480,  484,  487,  489,  491,  493,
	  495,  497,  499,  501,  503,  505,  507,  509,  511,  513,  515,  517,
	  519,  521,  523,  525,  527,  530,  532,  534,  536,  538,  540,  542,
	  544,  546,  548,  550,  552,  554,  556,  558,  560,  562,  564,  566,
	  568,  570,  573,  575,  577,  579,  581,  583,  585,  588,  590,  592,
	  594,  596,  598,  600,  602,  604,  606,  607,  608,  609,  610,  612,
	  613,  614,  615,  616,  617,  618,  619,  620,  621,  622,  640,  642,
	  644,  646,  648,  650,  652,  654,  656,  658,  660,  662,  664,  668,
	  671,  673,  675,  677,  679,  681,  683,  685,  687,  689,  691,  693,
	  695,  697,  699,  701,  703,  705,  707,  709,  711,  713,  715,  717,
	  719,  721,  723,  725,  727,  730,  732,  734,  736,  738,  740,  742,
	  744,  746,  748,  750,  752,  754,  756,  758,  760,  762,  764,  766,
	  768,  771,  773,  775,  777,  779,  781,  783,  785,  787,  789,  792,
	  794,  796,  798,  800,  802,  804,  806,  808,  810,  812,  814,  816,
	  819,  821,  823,  824,  825,  829,  835,  838,  840,  846,  866,  869,
	  871,  873,  875,  877,  879,  881,  883,  885,  887,  889,  891,  893,
	  895,  897,  899,  901,  903,  905,  907,  909,  912,  914,  916,  918,
	  920,  922,  924,  926,  928,  930,  932,  934,  936,  938,  940,  942,
	  944,  946,  948,  950,  952,  955,  957,  959,  961,  963,  965,  967,
	  969,  971,  973,  976,  978,  980,  982,  984,  986,  988,  990,  992,
	  994,  996,  998, 1000, 1003, 1005, 1007, 1009, 1010, 1011
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -61,  -17,   10,   32,   34,   35,   37,   42,   64,   65,   67,   69,
	   70,   76,   77,   80,   81,   83,  124,    9,   13, -119,  116,   97,
	  110,  116,   32,  100,  111,  110,  110,  -61,  -87,   32,  101,  115,
	   10,   13,   10,   13,  -61,   10,   32,   34,   35,   37,   42,   64,
	   65,   67,   69,   70,   76,   77,   80,   81,   83,  124,    9,   13,
	   34,   34,   10,   13,   10,   13,   10,   32,   34,    9,   13,   10,
	   32,   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,
	    9,   13,   10,   32,   34,    9,   13,   10,   32,    9,   13,   10,
	   32,    9,   13,   10,   13,   10,   95,   70,   69,   65,   84,   85,
	   82,   69,   95,   69,   78,   68,   95,   37,   32,   13,   32,   64,
	    9,   10,    9,   10,   13,   32,   64,   11,   12,   10,   32,   64,
	    9,   13,  108,  111,  114,  115,  111,  110,  116,  101,  120,  116,
	  101,   58,   10,   10,  -61,   10,   32,   35,   37,   42,   64,   65,
	   69,   70,   76,   77,   80,   81,   83,    9,   13, -119,   10,   10,
	  116,   10,   97,   10,  110,   10,  116,   10,   32,   10,  100,   10,
	  111,   10,  110,   10,  110,  -61,   10,  -87,   10,   10,   32,  101,
	  115,  -61,   10,   32,   34,   35,   37,   42,   64,   65,   67,   69,
	   70,   76,   77,   80,   81,   83,  124,    9,   13,  116,  120,   32,
	   97,  101,  109,  112,  108,  101,  115,   58,   10,   10,   10,   32,
	   35,   70,  124,    9,   13,   10,  111,   10,  110,   10,   99,   10,
	  116,   10,  105,   10,  111,   10,  110,   10,  110,   10,   97,   10,
	  108,   10,  105,   10,  116,  -61,   10,  -87,   10,   10,   58,  111,
	  110,   99,  116,  105,  111,  110,  110,   97,  108,  105,  116,  -61,
	  -87,   58,   10,   10,   10,   32,   35,   37,   64,   67,   69,   70,
	   80,   83,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,  111,   10,  110,
	   10,  116,   10,  101,   10,  120,   10,  116,   10,  101,   10,   58,
	   10,  120,   10,  101,   10,  109,   10,  112,   10,  108,   10,  101,
	   10,  115,   10,  111,   10,  110,   10,   99,   10,  116,   10,  105,
	   10,  111,   10,  110,   10,  110,   10,   97,   10,  108,   10,  105,
	   10,  116,  -61,   10,  -87,   10,   10,  108,   10,   97,   10,  110,
	   10,   32,   10,  100,   10,  117,   10,   32,   10,   83,  115,   10,
	   99,  -61,   10,  -87,   10,   10,  110,   10,   97,   10,  114,   10,
	  105,   10,  111,  111,  114,  115,  113,  117,   39,  101,   97,  105,
	  108,   97,  110,   32,  100,  117,   32,   83,  115,   99,  -61,  -87,
	  110,   97,  114,  105,  111,   58,   10,   10,  -61,   10,   32,   35,
	   37,   42,   64,   65,   69,   70,   76,   77,   81,   83,    9,   13,
	 -119,   10,   10,  116,   10,   97,   10,  110,   10,  116,   10,   32,
	   10,  100,   10,  111,   10,  110,   10,  110,  -61,   10,  -87,   10,
	   10,   32,  101,  115,   10,   32,  115,   10,   32,   10,   95,   10,
	   70,   10,   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,
	   69,   10,   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,
	   37,   10,  108,   10,  111,   10,  114,   10,  115,   10,  116,   10,
	   32,   97,   10,  111,   10,  110,   10,   99,   10,  116,   10,  105,
	   10,  111,   10,  110,   10,  110,   10,   97,   10,  108,   10,  105,
	   10,  116,  -61,   10,  -87,   10,   10,   58,   10,  111,   10,  114,
	   10,  115,   10,  113,   10,  117,   10,   39,  101,   10,   97,   10,
	  105,   10,  117,   10,   97,   10,  110,   10,  100,   10,   99,  111,
	  -61,   10,  -87,   10,   10,  110,   10,   97,   10,  114,   10,  105,
	   10,  111,   10,  105,   10,  116,  117,   97,  110,  100,   99,  111,
	  -61,  -87,  110,   97,  114,  105,  111,   58,   10,   10,  -61,   10,
	   32,   35,   37,   42,   64,   65,   67,   69,   70,   76,   77,   80,
	   81,   83,    9,   13, -119,   10,   10,  116,   10,   97,   10,  110,
	   10,  116,   10,   32,   10,  100,   10,  111,   10,  110,   10,  110,
	  -61,   10,  -87,   10,   10,   32,  101,  115,   10,   32,  115,   10,
	   32,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,
	   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,
	   68,   10,   95,   10,   37,   10,  108,   10,  111,   10,  114,   10,
	  115,   10,  111,   10,  110,   10,  116,   10,  101,   10,  120,   10,
	  116,   10,  101,   10,   58,   10,  116,   10,   32,   97,   10,  111,
	   10,  110,   10,   99,   10,  116,   10,  105,   10,  111,   10,  110,
	   10,  110,   10,   97,   10,  108,   10,  105,   10,  116,  -61,   10,
	  -87,   10,   10,  111,   10,  114,   10,  115,   10,  113,   10,  117,
	   10,   39,  101,   10,   97,   10,  105,   10,  108,   10,   97,   10,
	  110,   10,   32,   10,  100,   10,  117,   10,   32,   10,   83,  115,
	   10,   99,  -61,   10,  -87,   10,   10,  110,   10,   97,   10,  114,
	   10,  105,   10,  111,   10,  117,   10,   97,   10,  110,   10,  100,
	   10,   99,  111,   10,  105,   10,  116,  105,  116,   32,  124,    9,
	   13,   10,   32,   92,  124,    9,   13,   10,   92,  124,   10,   92,
	   10,   32,   92,  124,    9,   13,  -61,   10,   32,   34,   35,   37,
	   42,   64,   65,   67,   69,   70,   76,   77,   80,   81,   83,  124,
	    9,   13,   10,   32,  115,   10,   32,   10,   95,   10,   70,   10,
	   69,   10,   65,   10,   84,   10,   85,   10,   82,   10,   69,   10,
	   95,   10,   69,   10,   78,   10,   68,   10,   95,   10,   37,   10,
	  108,   10,  111,   10,  114,   10,  115,   10,  116,   10,   32,   97,
	   10,  111,   10,  110,   10,   99,   10,  116,   10,  105,   10,  111,
	   10,  110,   10,  110,   10,   97,   10,  108,   10,  105,   10,  116,
	  -61,   10,  -87,   10,   10,   58,   10,  111,   10,  114,   10,  115,
	   10,  113,   10,  117,   10,   39,  101,   10,   97,   10,  105,   10,
	  108,   10,   97,   10,  110,   10,   32,   10,  100,   10,  117,   10,
	   32,   10,   83,  115,   10,   99,  -61,   10,  -87,   10,   10,  110,
	   10,   97,   10,  114,   10,  105,   10,  111,   10,  117,   10,   97,
	   10,  110,   10,  100,   10,   99,  111,   10,  105,   10,  116,   32,
	  115,  -69,  -65,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   19,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    3,    2,    2,   18,    1,    1,    2,    2,    3,    3,
	    3,    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    3,    5,
	    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,   15,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    4,   18,    2,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    5,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,   10,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,   14,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    4,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    3,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    2,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,   16,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    1,    1,    2,    4,    3,    2,    4,   18,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    1,    1,
	    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    1,    1,    0,    0,    1,    1,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   21,   23,   25,   27,   29,   31,   33,   35,   37,   39,
	   41,   43,   45,   49,   52,   55,   75,   77,   79,   82,   85,   90,
	   95,  100,  105,  110,  114,  118,  121,  123,  125,  127,  129,  131,
	  133,  135,  137,  139,  141,  143,  145,  147,  149,  151,  153,  158,
	  165,  170,  172,  174,  176,  178,  180,  182,  184,  186,  188,  190,
	  192,  194,  196,  198,  215,  218,  221,  224,  227,  230,  233,  236,
	  239,  242,  245,  248,  251,  256,  276,  279,  282,  284,  286,  288,
	  290,  292,  294,  296,  298,  300,  307,  310,  313,  316,  319,  322,
	  325,  328,  331,  334,  337,  340,  343,  346,  349,  352,  354,  356,
	  358,  360,  362,  364,  366,  368,  370,  372,  374,  376,  378,  380,
	  382,  384,  386,  398,  401,  404,  407,  410,  413,  416,  419,  422,
	  425,  428,  431,  434,  437,  440,  443,  446,  449,  452,  455,  458,
	  461,  464,  467,  470,  473,  476,  479,  482,  485,  488,  491,  494,
	  497,  500,  503,  506,  509,  512,  515,  518,  521,  524,  527,  530,
	  533,  536,  539,  542,  545,  548,  552,  555,  558,  561,  564,  567,
	  570,  573,  576,  578,  580,  582,  584,  586,  589,  591,  593,  595,
	  597,  599,  601,  603,  605,  607,  610,  612,  614,  616,  618,  620,
	  622,  624,  626,  628,  630,  632,  648,  651,  654,  657,  660,  663,
	  666,  669,  672,  675,  678,  681,  684,  689,  693,  696,  699,  702,
	  705,  708,  711,  714,  717,  720,  723,  726,  729,  732,  735,  738,
	  741,  744,  747,  750,  753,  757,  760,  763,  766,  769,  772,  775,
	  778,  781,  784,  787,  790,  793,  796,  799,  802,  805,  808,  811,
	  814,  817,  821,  824,  827,  830,  833,  836,  839,  843,  846,  849,
	  852,  855,  858,  861,  864,  867,  870,  872,  874,  876,  878,  881,
	  883,  885,  887,  889,  891,  893,  895,  897,  899,  901,  919,  922,
	  925,  928,  931,  934,  937,  940,  943,  946,  949,  952,  955,  960,
	  964,  967,  970,  973,  976,  979,  982,  985,  988,  991,  994,  997,
	 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033,
	 1036, 1039, 1042, 1045, 1048, 1052, 1055, 1058, 1061, 1064, 1067, 1070,
	 1073, 1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1103, 1106,
	 1109, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 1144,
	 1147, 1150, 1153, 1156, 1159, 1162, 1165, 1168, 1171, 1174, 1177, 1180,
	 1184, 1187, 1190, 1192, 1194, 1198, 1204, 1208, 1211, 1217, 1237, 1241,
	 1244, 1247, 1250, 1253, 1256, 1259, 1262, 1265, 1268, 1271, 1274, 1277,
	 1280, 1283, 1286, 1289, 1292, 1295, 1298, 1301, 1305, 1308, 1311, 1314,
	 1317, 1320, 1323, 1326, 1329, 1332, 1335, 1338, 1341, 1344, 1347, 1350,
	 1353, 1356, 1359, 1362, 1365, 1369, 1372, 1375, 1378, 1381, 1384, 1387,
	 1390, 1393, 1396, 1400, 1403, 1406, 1409, 1412, 1415, 1418, 1421, 1424,
	 1427, 1430, 1433, 1436, 1440, 1443, 1446, 1449, 1451, 1453
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    2,    4,    3,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,   16,   17,   18,   19,    3,    0,   20,    0,   21,
	    0,   22,    0,   23,    0,   24,    0,   25,    0,   26,    0,   27,
	    0,   28,    0,   29,    0,   30,    0,   31,    0,   32,   33,   34,
	    0,   36,   37,   35,   39,   40,   38,    1,    4,    3,    5,    6,
	    7,    8,    9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
	   19,    3,    0,   41,    0,   42,    0,   44,   45,   43,   47,   48,
	   46,   51,   50,   52,   50,   49,   55,   54,   56,   54,   53,   55,
	   54,   57,   54,   53,   55,   54,   58,   54,   53,   60,   59,   61,
	   59,    0,    4,   62,   62,    0,   60,   59,   59,    0,   64,   65,
	   63,    4,    0,   66,    0,   67,    0,   68,    0,   69,    0,   70,
	    0,   71,    0,   72,    0,   73,    0,   74,    0,   75,    0,   76,
	    0,   77,    0,   78,    0,   79,    0,   32,    0,    0,    0,    0,
	    0,   80,   81,   82,   81,   81,   84,   83,   80,    4,   85,    9,
	   85,    0,   86,    0,   87,    0,   88,    0,   34,    0,   89,    0,
	   90,    0,   91,    0,   92,    0,   93,    0,   94,    0,   95,    0,
	   96,    0,   98,   97,  100,   99,  101,  100,  102,  103,  104,  105,
	  103,  106,  107,  108,  109,  110,  111,  112,  113,  102,   99,  114,
	  100,   99,  100,  115,   99,  100,  116,   99,  100,  117,   99,  100,
	  118,   99,  100,  119,   99,  100,  120,   99,  100,  121,   99,  100,
	  122,   99,  100,  123,   99,  124,  100,   99,  125,  100,   99,  100,
	  126,  127,  128,   99,  129,  131,  130,  132,  133,  134,  135,  136,
	  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  130,    0,
	  147,  148,    0,   32,   22,    0,  149,    0,  150,    0,  151,    0,
	  152,    0,  153,    0,  154,    0,  155,    0,  157,  156,  159,  158,
	  159,  160,  161,  162,  161,  160,  158,  159,  163,  158,  159,  164,
	  158,  159,  165,  158,  159,  166,  158,  159,  167,  158,  159,  168,
	  158,  159,  169,  158,  159,  170,  158,  159,  171,  158,  159,  172,
	  158,  159,  173,  158,  159,  174,  158,  175,  159,  158,  176,  159,
	  158,  159,  177,  158,  178,    0,  179,    0,  180,    0,  181,    0,
	  182,    0,  183,    0,  184,    0,  185,    0,  186,    0,  187,    0,
	  188,    0,  189,    0,  190,    0,  191,    0,  192,    0,  194,  193,
	  196,  195,  196,  197,  198,  199,  198,  200,  201,  202,  203,  204,
	  197,  195,  196,  205,  195,  196,  206,  195,  196,  207,  195,  196,
	  208,  195,  196,  209,  195,  196,  210,  195,  196,  211,  195,  196,
	  212,  195,  196,  213,  195,  196,  214,  195,  196,  215,  195,  196,
	  216,  195,  196,  217,  195,  196,  218,  195,  196,  219,  195,  196,
	  220,  195,  196,  221,  195,  196,  222,  195,  196,  223,  195,  196,
	  224,  195,  196,  225,  195,  196,  226,  195,  196,  227,  195,  196,
	  228,  195,  196,  229,  195,  196,  230,  195,  196,  231,  195,  196,
	  232,  195,  196,  225,  195,  196,  233,  195,  196,  234,  195,  196,
	  235,  195,  196,  236,  195,  196,  237,  195,  196,  238,  195,  196,
	  239,  195,  196,  240,  195,  196,  241,  195,  196,  242,  195,  196,
	  243,  195,  196,  244,  195,  245,  196,  195,  225,  196,  195,  196,
	  246,  195,  196,  247,  195,  196,  248,  195,  196,  249,  195,  196,
	  250,  195,  196,  251,  195,  196,  252,  195,  196,  253,  253,  195,
	  196,  254,  195,  255,  196,  195,  256,  196,  195,  196,  257,  195,
	  196,  258,  195,  196,  259,  195,  196,  260,  195,  196,  225,  195,
	  261,    0,  262,    0,  263,    0,  264,    0,  265,    0,   32,   34,
	    0,  266,    0,   88,    0,  267,    0,  268,    0,  269,    0,  270,
	    0,  271,    0,  272,    0,  273,    0,  274,  274,    0,  275,    0,
	  276,    0,  277,    0,  278,    0,  279,    0,  280,    0,  281,    0,
	  282,    0,  283,    0,  285,  284,  287,  286,  288,  287,  289,  290,
	  291,  292,  290,  293,  294,  295,  296,  297,  298,  299,  289,  286,
	  300,  287,  286,  287,  301,  286,  287,  302,  286,  287,  303,  286,
	  287,  304,  286,  287,  305,  286,  287,  306,  286,  287,  307,  286,
	  287,  308,  286,  287,  309,  286,  310,  287,  286,  311,  287,  286,
	  287,  312,  313,  314,  286,  287,  312,  314,  286,  287,  312,  286,
	  287,  315,  286,  287,  316,  286,  287,  317,  286,  287,  318,  286,
	  287,  319,  286,  287,  320,  286,  287,  321,  286,  287,  322,  286,
	  287,  323,  286,  287,  324,  286,  287,  325,  286,  287,  326,  286,
	  287,  327,  286,  287,  328,  286,  287,  329,  286,  287,  330,  286,
	  287,  331,  286,  287,  314,  286,  287,  332,  286,  287,  312,  302,
	  286,  287,  333,  286,  287,  334,  286,  287,  335,  286,  287,  336,
	  286,  287,  337,  286,  287,  338,  286,  287,  339,  286,  287,  340,
	  286,  287,  341,  286,  287,  342,  286,  287,  343,  286,  287,  344,
	  286,  345,  287,  286,  346,  287,  286,  287,  312,  286,  287,  347,
	  286,  287,  348,  286,  287,  349,  286,  287,  350,  286,  287,  351,
	  286,  287,  312,  314,  286,  287,  352,  286,  287,  331,  286,  287,
	  353,  286,  287,  354,  286,  287,  355,  286,  287,  314,  286,  287,
	  356,  357,  286,  358,  287,  286,  359,  287,  286,  287,  360,  286,
	  287,  361,  286,  287,  362,  286,  287,  363,  286,  287,  346,  286,
	  287,  364,  286,  287,  314,  286,  365,    0,  366,    0,  367,    0,
	   34,    0,  368,  369,    0,  370,    0,  371,    0,  372,    0,  373,
	    0,  374,    0,  375,    0,  376,    0,  377,    0,  379,  378,  381,
	  380,  382,  381,  383,  384,  385,  386,  384,  387,  388,  389,  390,
	  391,  392,  393,  394,  395,  383,  380,  396,  381,  380,  381,  397,
	  380,  381,  398,  380,  381,  399,  380,  381,  400,  380,  381,  401,
	  380,  381,  402,  380,  381,  403,  380,  381,  404,  380,  381,  405,
	  380,  406,  381,  380,  407,  381,  380,  381,  408,  409,  410,  380,
	  381,  408,  410,  380,  381,  408,  380,  381,  411,  380,  381,  412,
	  380,  381,  413,  380,  381,  414,  380,  381,  415,  380,  381,  416,
	  380,  381,  417,  380,  381,  418,  380,  381,  419,  380,  381,  420,
	  380,  381,  421,  380,  381,  422,  380,  381,  423,  380,  381,  424,
	  380,  381,  425,  380,  381,  426,  380,  381,  427,  380,  381,  410,
	  380,  381,  428,  380,  381,  429,  380,  381,  430,  380,  381,  431,
	  380,  381,  432,  380,  381,  433,  380,  381,  434,  380,  381,  408,
	  380,  381,  435,  380,  381,  408,  398,  380,  381,  436,  380,  381,
	  437,  380,  381,  438,  380,  381,  439,  380,  381,  440,  380,  381,
	  441,  380,  381,  442,  380,  381,  443,  380,  381,  444,  380,  381,
	  445,  380,  381,  446,  380,  381,  447,  380,  448,  381,  380,  434,
	  381,  380,  381,  449,  380,  381,  450,  380,  381,  451,  380,  381,
	  452,  380,  381,  453,  380,  381,  408,  410,  380,  381,  454,  380,
	  381,  427,  380,  381,  455,  380,  381,  456,  380,  381,  457,  380,
	  381,  458,  380,  381,  459,  380,  381,  460,  380,  381,  461,  380,
	  381,  462,  462,  380,  381,  463,  380,  464,  381,  380,  465,  381,
	  380,  381,  466,  380,  381,  467,  380,  381,  468,  380,  381,  469,
	  380,  381,  434,  380,  381,  470,  380,  381,  471,  380,  381,  472,
	  380,  381,  410,  380,  381,  463,  473,  380,  381,  474,  380,  381,
	  410,  380,  475,    0,   34,    0,  476,  477,  476,    0,  480,  479,
	  481,  482,  479,  478,    0,  484,  485,  483,    0,  484,  483,  480,
	  486,  484,  485,  486,  483,  487,  480,  488,  489,  490,  491,  492,
	  493,  494,  495,  496,  497,  498,  499,  500,  501,  502,  503,  488,
	    0,  100,  126,  128,   99,  100,  126,   99,  100,  504,   99,  100,
	  505,   99,  100,  506,   99,  100,  507,   99,  100,  508,   99,  100,
	  509,   99,  100,  510,   99,  100,  511,   99,  100,  512,   99,  100,
	  513,   99,  100,  514,   99,  100,  515,   99,  100,  516,   99,  100,
	  517,   99,  100,  518,   99,  100,  519,   99,  100,  520,   99,  100,
	  128,   99,  100,  521,   99,  100,  126,  116,   99,  100,  522,   99,
	  100,  523,   99,  100,  524,   99,  100,  525,   99,  100,  526,   99,
	  100,  527,   99,  100,  528,   99,  100,  529,   99,  100,  530,   99,
	  100,  531,   99,  100,  532,   99,  100,  533,   99,  534,  100,   99,
	  535,  100,   99,  100,  126,   99,  100,  536,   99,  100,  537,   99,
	  100,  538,   99,  100,  539,   99,  100,  540,   99,  100,  126,  128,
	   99,  100,  541,   99,  100,  520,   99,  100,  542,   99,  100,  543,
	   99,  100,  544,   99,  100,  545,   99,  100,  546,   99,  100,  547,
	   99,  100,  548,   99,  100,  549,  549,   99,  100,  550,   99,  551,
	  100,   99,  552,  100,   99,  100,  553,   99,  100,  554,   99,  100,
	  555,   99,  100,  556,   99,  100,  535,   99,  100,  557,   99,  100,
	  558,   99,  100,  559,   99,  100,  128,   99,  100,  550,  560,   99,
	  100,  561,   99,  100,  128,   99,   32,   34,    0,  562,    0,    3,
	    0,  563,    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,  463,   17,   17,   18,   29,   31,   45,   46,   49,   53,
	   78,  105,  182,  188,  190,  282,  286,  388,    3,    4,    5,    6,
	    7,    8,    9,   10,   11,   12,   13,   14,   15,  462,   45,   16,
	   17,   30,   16,   17,   30,   19,   20,   21,   22,   21,   21,   22,
	   21,   23,   23,   23,   24,   23,   23,   23,   24,   25,   26,   27,
	   17,   28,   27,   29,   17,   30,   32,   33,   34,   35,   36,   37,
	   38,   39,   40,   41,   42,   43,   44,  465,   47,   48,   17,   47,
	   46,   48,   50,   51,   52,   54,   55,   56,   57,   58,   59,   60,
	   61,   62,   63,   62,   63,   64,   63,   17,  396,  395,  410,  414,
	  416,  431,  437,  439,  455,  459,   65,   66,   67,   68,   69,   70,
	   71,   72,   73,   74,   75,   76,   77,  394,  395,    2,   17,   17,
	   18,   29,   31,   45,   46,   49,   53,   78,  105,  182,  188,  190,
	  282,  286,  388,   79,   80,   81,   82,   83,   84,   85,   86,   87,
	   88,   89,   88,   89,   89,   17,   90,   91,   92,   93,   94,   95,
	   96,   97,   98,   99,  100,  101,  102,  103,  104,   77,  106,  107,
	  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
	  120,  121,  122,  121,  122,  122,   17,  123,  137,  145,  152,  166,
	  174,  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
	  135,  136,   17,  138,  139,  140,  141,  142,  143,  144,   77,  146,
	  147,  148,  149,  150,  151,  153,  154,  155,  156,  157,  158,  159,
	  160,  161,  162,  163,  164,  165,  167,  168,  169,  170,  171,  172,
	  173,  174,  175,  176,  177,  178,  179,  180,  181,  183,  184,  185,
	  186,  187,  189,  191,  192,  193,  194,  195,  196,  197,  198,  199,
	  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  208,  209,
	  210,  209,   17,  225,  224,  239,  243,  245,  260,  266,  268,  272,
	  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,
	   77,  223,  224,  226,  227,  228,  229,  230,  231,  232,  233,  234,
	  235,  236,  237,  238,   17,  240,  241,  242,  244,  246,  247,  248,
	  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,  261,
	  262,  263,  264,  265,  267,  269,  270,  271,  273,  280,  274,  275,
	  276,  277,  278,  279,  281,  283,  284,  285,  287,  386,  288,  289,
	  290,  291,  292,  293,  294,  295,  296,  297,  296,  297,  298,  297,
	   17,  313,  312,  327,  331,  339,  341,  355,  361,  363,  379,  383,
	  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
	   77,  311,  312,  314,  315,  316,  317,  318,  319,  320,  321,  322,
	  323,  324,  325,  326,   17,  328,  329,  330,  332,  333,  334,  335,
	  336,  337,  338,  340,  342,  343,  344,  345,  346,  347,  348,  349,
	  350,  351,  352,  353,  354,  356,  357,  358,  359,  360,  362,  364,
	  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,
	  377,  378,  380,  381,  382,  384,  385,  387,  388,  389,  390,  392,
	  393,  391,  389,  390,  391,  389,  392,    2,  393,   18,   29,   31,
	   45,   46,   49,   53,   78,  105,  182,  188,  190,  282,  286,  388,
	  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
	  409,   17,  411,  412,  413,  415,  417,  418,  419,  420,  421,  422,
	  423,  424,  425,  426,  427,  428,  429,  430,  432,  433,  434,  435,
	  436,  438,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,
	  450,  451,  452,  453,  454,  456,  457,  458,  460,  461,  464,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,   29,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,
	   29,   29,   29,   29,   29,   29,   29,   35,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,
	  149,  126,    0,  110,   23,    0,    0,    7,  139,   48,    0,  102,
	    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,    0,   11,
	  106,    0,    0,    0,  114,   25,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   27,  118,   27,
	   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,   84,    0,   72,   33,   84,   84,   84,
	   84,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   15,    0,    0,   63,   31,  130,
	   60,   57,   31,   63,   57,   63,   63,   63,   63,   63,   63,   63,
	   63,   63,   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   57,  144,    0,   54,    0,   81,   84,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   21,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   57,  144,    0,   54,    0,   69,   33,   84,   84,   84,   84,
	   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,   13,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,
	   84,    0,   78,   33,   84,   84,   84,   84,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   57,  144,    0,   54,   84,    0,
	   75,   33,   84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,   37,
	   54,   37,   87,    0,    0,   39,    0,   96,    0,   93,   90,   41,
	   96,   90,   96,   96,   96,   96,   96,   96,   96,   96,   96,   99,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   15,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 465;

static final int lexer_en_main = 1;


// line 159 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 659 "java/src/main/java/gherkin/lexer/Fr.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
    
// line 666 "java/src/main/java/gherkin/lexer/Fr.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 927 "java/src/main/java/gherkin/lexer/Fr.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 959 "java/src/main/java/gherkin/lexer/Fr.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/fr.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}
