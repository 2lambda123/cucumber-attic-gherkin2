
// line 1 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
package gherkin.lexer;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.ArrayList;
import java.util.regex.Pattern;
import gherkin.lexer.Lexer;
import gherkin.lexer.Listener;
import gherkin.lexer.LexingError;

public class Pt implements Lexer {
  
// line 150 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"


  private final Listener listener;

  public Pt(Listener listener) {
    this.listener = listener;
  }

  
// line 26 "java/src/main/java/gherkin/lexer/Pt.java"
private static byte[] init__lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   16,    1,   17,    1,   18,    1,
	   19,    1,   20,    1,   21,    1,   22,    1,   23,    2,    2,   18,
	    2,    3,    4,    2,   13,    0,    2,   14,   15,    2,   17,    0,
	    2,   17,    1,    2,   17,   16,    2,   17,   19,    2,   18,    6,
	    2,   18,    7,    2,   18,    8,    2,   18,    9,    2,   18,   10,
	    2,   18,   16,    2,   20,   21,    2,   22,    0,    2,   22,    1,
	    2,   22,   16,    2,   22,   19,    3,    4,   14,   15,    3,    5,
	   14,   15,    3,   11,   14,   15,    3,   12,   14,   15,    3,   13,
	   14,   15,    3,   14,   15,   18,    3,   17,    0,   11,    3,   17,
	   14,   15,    4,    2,   14,   15,   18,    4,    3,    4,   14,   15,
	    4,   17,    0,   14,   15,    5,   17,    0,   11,   14,   15
	};
}

private static final byte _lexer_actions[] = init__lexer_actions_0();


private static short[] init__lexer_key_offsets_0()
{
	return new short [] {
	    0,    0,   17,   18,   19,   35,   36,   37,   39,   41,   46,   51,
	   56,   61,   66,   70,   74,   76,   77,   78,   79,   80,   81,   82,
	   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,   94,   96,
	  101,  108,  113,  116,  117,  118,  119,  120,  121,  122,  124,  125,
	  126,  127,  128,  129,  130,  131,  132,  133,  144,  146,  148,  150,
	  152,  154,  156,  158,  160,  162,  164,  166,  168,  170,  172,  176,
	  178,  180,  182,  184,  186,  188,  191,  193,  195,  197,  199,  201,
	  203,  205,  221,  223,  224,  226,  228,  229,  230,  231,  232,  233,
	  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,
	  247,  248,  249,  250,  251,  252,  253,  254,  268,  270,  272,  274,
	  276,  278,  280,  282,  284,  286,  288,  290,  292,  294,  296,  298,
	  301,  303,  305,  307,  309,  311,  313,  316,  318,  320,  322,  324,
	  326,  328,  330,  332,  335,  337,  339,  341,  343,  345,  347,  350,
	  353,  356,  358,  361,  363,  365,  367,  369,  371,  373,  375,  377,
	  379,  381,  383,  385,  387,  389,  391,  393,  395,  397,  399,  401,
	  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,  417,
	  418,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
	  431,  432,  433,  434,  436,  437,  438,  439,  440,  441,  442,  443,
	  444,  445,  453,  455,  457,  459,  461,  463,  465,  467,  470,  472,
	  474,  476,  478,  480,  482,  484,  486,  488,  490,  492,  494,  496,
	  498,  500,  502,  504,  506,  508,  510,  511,  512,  514,  515,  516,
	  517,  518,  519,  520,  521,  522,  523,  524,  525,  526,  527,  528,
	  542,  544,  546,  548,  550,  552,  554,  556,  558,  560,  562,  564,
	  566,  568,  570,  572,  575,  577,  579,  581,  583,  585,  587,  590,
	  592,  594,  596,  598,  600,  602,  604,  606,  609,  611,  613,  615,
	  617,  620,  622,  625,  628,  630,  632,  634,  636,  638,  641,  643,
	  645,  647,  649,  651,  653,  655,  657,  659,  661,  663,  665,  667,
	  669,  671,  673,  675,  677,  679,  681,  683,  685,  689,  691,  694,
	  696,  698,  700,  702,  704,  706,  708,  710,  712,  714,  716,  718,
	  720,  722,  724,  726,  728,  730,  732,  734,  736,  738,  740,  742,
	  744,  746,  748,  750,  752,  754,  756,  758,  759,  760,  761,  762,
	  763,  764,  768,  774,  777,  779,  785,  801,  803,  806,  808,  810,
	  812,  814,  818,  820,  822,  824,  826,  828,  830,  832,  834,  836,
	  838,  840,  842,  844,  846,  848,  850,  852,  854,  856,  859,  861,
	  863,  865,  867,  869,  871,  873,  875,  877,  879,  881,  883,  885,
	  887,  889,  891,  893,  895,  897,  899,  901,  903,  905,  907,  909,
	  912,  914,  916,  918,  920,  922,  924,  926,  928,  930,  932,  934,
	  936,  939,  941,  943,  945,  947,  949,  951,  953,  955,  958,  960,
	  962,  964,  966,  968,  970,  972,  974,  976,  978,  979,  981,  982,
	  983,  984,  985,  988,  989,  990,  991,  992,  993,  994,  995,  996,
	  997, 1011, 1013, 1015, 1017, 1019, 1021, 1023, 1025, 1027, 1029, 1031,
	 1033, 1035, 1037, 1039, 1041, 1045, 1047, 1049, 1051, 1053, 1055, 1057,
	 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1079, 1081, 1083,
	 1085, 1087, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108,
	 1110, 1112, 1114, 1116, 1119, 1121, 1124, 1127, 1129, 1131, 1133, 1135,
	 1137, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160,
	 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184,
	 1186, 1188, 1190, 1194, 1196, 1199, 1201, 1203, 1205, 1207, 1209, 1211,
	 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1230, 1232, 1234, 1237,
	 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261,
	 1263, 1265, 1267, 1269, 1270, 1271, 1272, 1273, 1274
	};
}

private static final short _lexer_key_offsets[] = init__lexer_key_offsets_0();


private static byte[] init__lexer_trans_keys_0()
{
	return new byte [] {
	  -17,   10,   32,   34,   35,   37,   42,   64,   67,   68,   69,   70,
	   77,   81,  124,    9,   13,  -69,  -65,   10,   32,   34,   35,   37,
	   42,   64,   67,   68,   69,   70,   77,   81,  124,    9,   13,   34,
	   34,   10,   13,   10,   13,   10,   32,   34,    9,   13,   10,   32,
	   34,    9,   13,   10,   32,   34,    9,   13,   10,   32,   34,    9,
	   13,   10,   32,   34,    9,   13,   10,   32,    9,   13,   10,   32,
	    9,   13,   10,   13,   10,   95,   70,   69,   65,   84,   85,   82,
	   69,   95,   69,   78,   68,   95,   37,   32,   10,   13,   10,   13,
	   13,   32,   64,    9,   10,    9,   10,   13,   32,   64,   11,   12,
	   10,   32,   64,    9,   13,   97,  101,  111,  114,   97,   99,  116,
	  101,  114,  -61,  105,  -83,  115,  116,  105,   99,   97,   58,   10,
	   10,   10,   32,   35,   37,   64,   67,   68,   69,   70,    9,   13,
	   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,   10,   85,
	   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,   10,   68,
	   10,   95,   10,   37,   10,   97,  101,  111,   10,  114,   10,   97,
	   10,   99,   10,  116,   10,  101,   10,  114,  -61,   10,  105,  -83,
	   10,   10,  115,   10,  116,   10,  105,   10,   99,   10,   97,   10,
	   58,   10,   32,   34,   35,   37,   42,   64,   67,   68,   69,   70,
	   77,   81,  124,    9,   13,   97,  101,  100,   97,  111,   32,  115,
	  108,  105,  110,  101,   97,  -61,   99,  -89,  -61,  -93,  111,   32,
	  100,  111,   32,   67,  101,  110,  -61,  -95,  114,  105,  111,   58,
	   10,   10,   10,   32,   35,   37,   42,   64,   67,   68,   69,   70,
	   77,   81,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,
	   10,   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,
	   10,   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,   97,
	  101,   10,  114,   10,   97,   10,   99,   10,  116,   10,  101,   10,
	  114,  -61,   10,  105,  -83,   10,   10,  115,   10,  116,   10,  105,
	   10,   99,   10,   97,   10,   58,   10,  110,  -61,   10,   97,  -95,
	   10,   10,  114,   10,  105,   10,  111,   10,   97,   10,  100,   10,
	   97,  111,   10,   32,  115,   10,   32,  110,   10,  116,  -61,   10,
	   97,  -93,   10,   10,  111,   10,  117,   10,  110,   10,   99,   10,
	  105,   10,  111,   10,  110,   10,   97,   10,  108,   10,  105,   10,
	  100,   10,   97,   10,  100,   10,  101,   10,   97,   10,  115,   10,
	  117,   10,   97,   10,  110,   10,  100,   97,  111,   32,  100,  111,
	   32,   67,  101,  110,   97,   32,  110,  115,  120,  116,  -61,   97,
	  -93,  111,  113,  117,  101,  109,   97,   32,  100,  111,   32,   67,
	  101,  110,  -61,   97,  101,  109,  112,  108,  111,  115,   58,   10,
	   10,   10,   32,   35,   67,   70,  124,    9,   13,   10,   97,   10,
	  114,   10,   97,   10,   99,   10,  116,   10,  101,   10,  114,  -61,
	   10,  105,  -83,   10,   10,  115,   10,  116,   10,  105,   10,   99,
	   10,   97,   10,   58,   10,  117,   10,  110,   10,   99,   10,  105,
	   10,  111,   10,  110,   10,   97,   10,  108,   10,  105,   10,  100,
	   10,   97,   10,  100,   10,  101,  117,  110,   99,  100,  105,  111,
	  110,   97,  108,  105,  100,   97,  100,  101,  111,   58,   10,   10,
	   10,   32,   35,   37,   42,   64,   67,   68,   69,   70,   77,   81,
	    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,   84,
	   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,   78,
	   10,   68,   10,   95,   10,   37,   10,   32,   10,   97,  101,   10,
	  114,   10,   97,   10,   99,   10,  116,   10,  101,   10,  114,  -61,
	   10,  105,  -83,   10,   10,  115,   10,  116,   10,  105,   10,   99,
	   10,   97,   10,   58,   10,  110,  -61,   10,   97,  -95,   10,   10,
	  114,   10,  105,   10,  111,   10,   97,  101,   10,  100,   10,   97,
	  111,   10,   32,  115,   10,  108,   10,  105,   10,  110,   10,  101,
	   10,   97,  -61,   10,   99,  -89,   10,  -61,   10,  -93,   10,   10,
	  111,   10,   32,   10,  100,   10,  111,   10,   32,   10,   67,   10,
	  101,   10,  110,  -61,   10,   10,   97,   10,  111,   10,   32,   10,
	  100,   10,  111,   10,   32,   10,   67,   10,  101,   10,  110,   10,
	   97,   10,   32,  110,  115,   10,  116,  -61,   10,   97,  -93,   10,
	   10,  111,   10,  113,   10,  117,   10,  101,   10,  109,   10,   97,
	   10,   32,   10,  100,   10,  111,   10,   32,   10,   67,   10,  101,
	   10,  117,   10,  110,   10,   99,   10,  105,   10,  111,   10,  110,
	   10,   97,   10,  108,   10,  105,   10,  100,   10,   97,   10,  100,
	   10,  101,   10,   97,   10,  115,   10,  117,   10,   97,   10,  110,
	   10,  100,   97,  115,  117,   97,  110,  100,   32,  124,    9,   13,
	   10,   32,   92,  124,    9,   13,   10,   92,  124,   10,   92,   10,
	   32,   92,  124,    9,   13,   10,   32,   34,   35,   37,   42,   64,
	   67,   68,   69,   70,   77,   81,  124,    9,   13,   10,  110,  -61,
	   10,   97,  -95,   10,   10,  114,   10,  105,   10,  111,   10,   32,
	   58,  115,   10,  100,   10,  101,   10,   32,   10,   70,   10,  117,
	   10,  110,   10,  100,   10,  111,   10,  110,   10,  116,   10,  101,
	   10,  120,   10,  116,   10,  101,   10,  108,   10,  105,   10,  110,
	   10,  101,   10,   97,  -61,   10,   99,  -89,   10,  -61,   10,  -93,
	   10,   10,  111,   10,   32,   10,  100,   10,  111,   10,   32,   10,
	   67,   10,  101,   10,  110,  -61,   10,  -95,   10,   10,  114,   10,
	  105,   10,   97,   10,  111,   10,   32,   10,  100,   10,  111,   10,
	   32,   10,   67,   10,  101,   10,  110,   10,   97,   10,  115,  120,
	   10,  113,   10,  117,   10,  101,   10,  109,   10,   97,   10,   32,
	   10,  100,   10,  111,   10,   32,   10,   67,   10,  101,   10,  110,
	  -61,   10,   97,   10,  101,   10,  109,   10,  112,   10,  108,   10,
	  111,   10,  115,   10,  117,   10,  110,   10,   99,  100,   10,  105,
	   10,  111,   10,  110,   10,   97,   10,  108,   10,  105,   10,  100,
	   10,   97,   10,  100,   10,  101,  110,  -61,   97,  -95,  114,  105,
	  111,   32,   58,  115,  100,  101,   32,   70,  117,  110,  100,   10,
	   10,   10,   32,   35,   37,   42,   64,   67,   68,   69,   70,   77,
	   81,    9,   13,   10,   95,   10,   70,   10,   69,   10,   65,   10,
	   84,   10,   85,   10,   82,   10,   69,   10,   95,   10,   69,   10,
	   78,   10,   68,   10,   95,   10,   37,   10,   32,   10,   97,  101,
	  111,   10,  114,   10,   97,   10,   99,   10,  116,   10,  101,   10,
	  114,  -61,   10,  105,  -83,   10,   10,  115,   10,  116,   10,  105,
	   10,   99,   10,   97,   10,   58,   10,  110,  -61,   10,   97,  -95,
	   10,   10,  114,   10,  105,   10,  111,   10,   32,   58,   10,  100,
	   10,  101,   10,   32,   10,   70,   10,  117,   10,  110,   10,  100,
	   10,  111,   10,  110,   10,  116,   10,  101,   10,  120,   10,  116,
	   10,   97,  101,   10,  100,   10,   97,  111,   10,   32,  115,   10,
	  108,   10,  105,   10,  110,   10,  101,   10,   97,  -61,   10,   99,
	  -89,   10,  -61,   10,  -93,   10,   10,  111,   10,   32,   10,  100,
	   10,  111,   10,   32,   10,   67,   10,  101,   10,  110,  -61,   10,
	  -95,   10,   10,  114,   10,  105,   10,   97,   10,  111,   10,   32,
	   10,  100,   10,  111,   10,   32,   10,   67,   10,  101,   10,  110,
	   10,   97,   10,   32,  110,  115,   10,  116,  -61,   10,   97,  -93,
	   10,   10,  111,   10,  113,   10,  117,   10,  101,   10,  109,   10,
	   97,   10,   32,   10,  100,   10,  111,   10,   32,   10,   67,   10,
	  101,   10,  110,  -61,   10,   97,   10,  117,   10,  110,   10,   99,
	  100,   10,  105,   10,  111,   10,  110,   10,   97,   10,  108,   10,
	  105,   10,  100,   10,   97,   10,  100,   10,  101,   10,   97,   10,
	  115,   10,  117,   10,   97,   10,  110,   10,  100,  110,  116,  101,
	  120,  116,    0
	};
}

private static final byte _lexer_trans_keys[] = init__lexer_trans_keys_0();


private static byte[] init__lexer_single_lengths_0()
{
	return new byte [] {
	    0,   15,    1,    1,   14,    1,    1,    2,    2,    3,    3,    3,
	    3,    3,    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
	    5,    3,    3,    1,    1,    1,    1,    1,    1,    2,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    9,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,   14,    2,    1,    2,    2,    1,    1,    1,    1,    1,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,   12,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    3,    3,
	    3,    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    4,    1,
	    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
	    1,    6,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    1,    1,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   12,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,    2,
	    3,    2,    3,    3,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    4,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
	    1,    2,    4,    3,    2,    4,   14,    2,    3,    2,    2,    2,
	    2,    4,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    1,    2,    1,    1,
	    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
	   12,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    4,    2,    2,    2,    2,    2,    2,    3,
	    2,    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    2,
	    2,    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    3,    2,    3,    3,    2,    2,    2,    2,    2,
	    3,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    4,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    2,    2,    3,    2,    2,    3,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    1,    1,    1,    1,    1,    0
	};
}

private static final byte _lexer_single_lengths[] = init__lexer_single_lengths_0();


private static byte[] init__lexer_range_lengths_0()
{
	return new byte [] {
	    0,    1,    0,    0,    1,    0,    0,    0,    0,    1,    1,    1,
	    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    1,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    1,    0,    0,    1,    1,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0
	};
}

private static final byte _lexer_range_lengths[] = init__lexer_range_lengths_0();


private static short[] init__lexer_index_offsets_0()
{
	return new short [] {
	    0,    0,   17,   19,   21,   37,   39,   41,   44,   47,   52,   57,
	   62,   67,   72,   76,   80,   83,   85,   87,   89,   91,   93,   95,
	   97,   99,  101,  103,  105,  107,  109,  111,  113,  115,  118,  121,
	  126,  133,  138,  142,  144,  146,  148,  150,  152,  154,  157,  159,
	  161,  163,  165,  167,  169,  171,  173,  175,  186,  189,  192,  195,
	  198,  201,  204,  207,  210,  213,  216,  219,  222,  225,  228,  233,
	  236,  239,  242,  245,  248,  251,  255,  258,  261,  264,  267,  270,
	  273,  276,  292,  295,  297,  300,  303,  305,  307,  309,  311,  313,
	  316,  318,  320,  322,  324,  326,  328,  330,  332,  334,  336,  338,
	  340,  342,  344,  346,  348,  350,  352,  354,  368,  371,  374,  377,
	  380,  383,  386,  389,  392,  395,  398,  401,  404,  407,  410,  413,
	  417,  420,  423,  426,  429,  432,  435,  439,  442,  445,  448,  451,
	  454,  457,  460,  463,  467,  470,  473,  476,  479,  482,  485,  489,
	  493,  497,  500,  504,  507,  510,  513,  516,  519,  522,  525,  528,
	  531,  534,  537,  540,  543,  546,  549,  552,  555,  558,  561,  564,
	  567,  569,  571,  573,  575,  577,  579,  581,  583,  585,  587,  592,
	  594,  597,  599,  601,  603,  605,  607,  609,  611,  613,  615,  617,
	  619,  621,  623,  625,  628,  630,  632,  634,  636,  638,  640,  642,
	  644,  646,  654,  657,  660,  663,  666,  669,  672,  675,  679,  682,
	  685,  688,  691,  694,  697,  700,  703,  706,  709,  712,  715,  718,
	  721,  724,  727,  730,  733,  736,  739,  741,  743,  746,  748,  750,
	  752,  754,  756,  758,  760,  762,  764,  766,  768,  770,  772,  774,
	  788,  791,  794,  797,  800,  803,  806,  809,  812,  815,  818,  821,
	  824,  827,  830,  833,  837,  840,  843,  846,  849,  852,  855,  859,
	  862,  865,  868,  871,  874,  877,  880,  883,  887,  890,  893,  896,
	  899,  903,  906,  910,  914,  917,  920,  923,  926,  929,  933,  936,
	  939,  942,  945,  948,  951,  954,  957,  960,  963,  966,  969,  972,
	  975,  978,  981,  984,  987,  990,  993,  996,  999, 1004, 1007, 1011,
	 1014, 1017, 1020, 1023, 1026, 1029, 1032, 1035, 1038, 1041, 1044, 1047,
	 1050, 1053, 1056, 1059, 1062, 1065, 1068, 1071, 1074, 1077, 1080, 1083,
	 1086, 1089, 1092, 1095, 1098, 1101, 1104, 1107, 1109, 1111, 1113, 1115,
	 1117, 1119, 1123, 1129, 1133, 1136, 1142, 1158, 1161, 1165, 1168, 1171,
	 1174, 1177, 1182, 1185, 1188, 1191, 1194, 1197, 1200, 1203, 1206, 1209,
	 1212, 1215, 1218, 1221, 1224, 1227, 1230, 1233, 1236, 1239, 1243, 1246,
	 1249, 1252, 1255, 1258, 1261, 1264, 1267, 1270, 1273, 1276, 1279, 1282,
	 1285, 1288, 1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 1318,
	 1322, 1325, 1328, 1331, 1334, 1337, 1340, 1343, 1346, 1349, 1352, 1355,
	 1358, 1362, 1365, 1368, 1371, 1374, 1377, 1380, 1383, 1386, 1390, 1393,
	 1396, 1399, 1402, 1405, 1408, 1411, 1414, 1417, 1420, 1422, 1425, 1427,
	 1429, 1431, 1433, 1437, 1439, 1441, 1443, 1445, 1447, 1449, 1451, 1453,
	 1455, 1469, 1472, 1475, 1478, 1481, 1484, 1487, 1490, 1493, 1496, 1499,
	 1502, 1505, 1508, 1511, 1514, 1519, 1522, 1525, 1528, 1531, 1534, 1537,
	 1541, 1544, 1547, 1550, 1553, 1556, 1559, 1562, 1565, 1569, 1572, 1575,
	 1578, 1581, 1585, 1588, 1591, 1594, 1597, 1600, 1603, 1606, 1609, 1612,
	 1615, 1618, 1621, 1624, 1628, 1631, 1635, 1639, 1642, 1645, 1648, 1651,
	 1654, 1658, 1661, 1664, 1667, 1670, 1673, 1676, 1679, 1682, 1685, 1688,
	 1691, 1694, 1697, 1700, 1703, 1706, 1709, 1712, 1715, 1718, 1721, 1724,
	 1727, 1730, 1733, 1738, 1741, 1745, 1748, 1751, 1754, 1757, 1760, 1763,
	 1766, 1769, 1772, 1775, 1778, 1781, 1784, 1787, 1791, 1794, 1797, 1801,
	 1804, 1807, 1810, 1813, 1816, 1819, 1822, 1825, 1828, 1831, 1834, 1837,
	 1840, 1843, 1846, 1849, 1851, 1853, 1855, 1857, 1859
	};
}

private static final short _lexer_index_offsets[] = init__lexer_index_offsets_0();


private static short[] init__lexer_indicies_0()
{
	return new short [] {
	    1,    3,    2,    4,    5,    6,    7,    8,    9,   10,   11,   12,
	   13,   14,   15,    2,    0,   16,    0,    2,    0,    3,    2,    4,
	    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,   15,    2,
	    0,   17,    0,   18,    0,   20,   21,   19,   23,   24,   22,   27,
	   26,   28,   26,   25,   31,   30,   32,   30,   29,   31,   30,   33,
	   30,   29,   31,   30,   34,   30,   29,   36,   35,   37,   35,    0,
	    3,   38,   38,    0,   36,   35,   35,    0,   40,   41,   39,    3,
	    0,   42,    0,   43,    0,   44,    0,   45,    0,   46,    0,   47,
	    0,   48,    0,   49,    0,   50,    0,   51,    0,   52,    0,   53,
	    0,   54,    0,   55,    0,   56,    0,   58,   59,   57,   61,   62,
	   60,    0,    0,    0,    0,   63,   64,   65,   64,   64,   67,   66,
	   63,    3,   68,    8,   68,    0,   69,   70,   71,    0,   72,    0,
	   73,    0,   74,    0,   75,    0,   76,    0,   77,    0,   78,   79,
	    0,   79,    0,   80,    0,   81,    0,   82,    0,   83,    0,   84,
	    0,   85,    0,   87,   86,   89,   88,   89,   90,   91,   92,   91,
	   93,   94,   95,   96,   90,   88,   89,   97,   88,   89,   98,   88,
	   89,   99,   88,   89,  100,   88,   89,  101,   88,   89,  102,   88,
	   89,  103,   88,   89,  104,   88,   89,  105,   88,   89,  106,   88,
	   89,  107,   88,   89,  108,   88,   89,  109,   88,   89,  110,   88,
	   89,  111,  112,  113,   88,   89,  114,   88,   89,  115,   88,   89,
	  116,   88,   89,  117,   88,   89,  118,   88,   89,  119,   88,  120,
	   89,  121,   88,  121,   89,   88,   89,  122,   88,   89,  123,   88,
	   89,  124,   88,   89,  125,   88,   89,  126,   88,   89,  127,   88,
	  129,  128,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
	  140,  141,  128,    0,  142,  143,    0,  144,    0,  145,  145,    0,
	   56,  146,    0,  147,    0,  148,    0,  149,    0,  150,    0,  151,
	    0,  152,  153,    0,  154,    0,  155,    0,  156,    0,  157,    0,
	  158,    0,  159,    0,  160,    0,  161,    0,  162,    0,  163,    0,
	  164,    0,  165,    0,  166,    0,  167,    0,  168,    0,  169,    0,
	  170,    0,  172,  171,  174,  173,  174,  175,  176,  177,  178,  176,
	  179,  180,  181,  182,  183,  184,  175,  173,  174,  185,  173,  174,
	  186,  173,  174,  187,  173,  174,  188,  173,  174,  189,  173,  174,
	  190,  173,  174,  191,  173,  174,  192,  173,  174,  193,  173,  174,
	  194,  173,  174,  195,  173,  174,  196,  173,  174,  197,  173,  174,
	  198,  173,  174,  199,  173,  174,  200,  201,  173,  174,  202,  173,
	  174,  203,  173,  174,  204,  173,  174,  205,  173,  174,  206,  173,
	  174,  207,  173,  208,  174,  209,  173,  209,  174,  173,  174,  210,
	  173,  174,  211,  173,  174,  212,  173,  174,  213,  173,  174,  214,
	  173,  174,  199,  173,  174,  215,  173,  216,  174,  217,  173,  217,
	  174,  173,  174,  218,  173,  174,  219,  173,  174,  214,  173,  174,
	  220,  173,  174,  221,  173,  174,  222,  222,  173,  174,  199,  223,
	  173,  174,  199,  224,  173,  174,  225,  173,  226,  174,  227,  173,
	  227,  174,  173,  174,  223,  173,  174,  228,  173,  174,  229,  173,
	  174,  230,  173,  174,  231,  173,  174,  232,  173,  174,  233,  173,
	  174,  234,  173,  174,  235,  173,  174,  236,  173,  174,  237,  173,
	  174,  238,  173,  174,  239,  173,  174,  214,  173,  174,  240,  173,
	  174,  223,  173,  174,  241,  173,  174,  242,  173,  174,  243,  173,
	  174,  227,  173,  244,    0,  245,    0,  246,    0,  247,    0,  248,
	    0,  249,    0,  250,    0,  251,    0,  252,    0,  166,    0,   56,
	  253,  254,  255,    0,  256,    0,  257,  258,    0,  258,    0,  146,
	    0,  259,    0,  260,    0,  261,    0,  262,    0,  263,    0,  264,
	    0,  265,    0,  266,    0,  267,    0,  268,    0,  269,    0,  270,
	    0,  165,  166,    0,  271,    0,  272,    0,  273,    0,  274,    0,
	  275,    0,  276,    0,  277,    0,  279,  278,  281,  280,  281,  282,
	  283,  284,  285,  283,  282,  280,  281,  286,  280,  281,  287,  280,
	  281,  288,  280,  281,  289,  280,  281,  290,  280,  281,  291,  280,
	  281,  292,  280,  293,  281,  294,  280,  294,  281,  280,  281,  295,
	  280,  281,  296,  280,  281,  297,  280,  281,  298,  280,  281,  299,
	  280,  281,  300,  280,  281,  301,  280,  281,  302,  280,  281,  303,
	  280,  281,  304,  280,  281,  305,  280,  281,  306,  280,  281,  307,
	  280,  281,  308,  280,  281,  309,  280,  281,  310,  280,  281,  311,
	  280,  281,  312,  280,  281,  299,  280,  313,    0,  314,    0,  315,
	  316,    0,  317,    0,  318,    0,  319,    0,  320,    0,  321,    0,
	  322,    0,  323,    0,  324,    0,  325,    0,   84,    0,  326,    0,
	  327,    0,  329,  328,  331,  330,  331,  332,  333,  334,  335,  333,
	  336,  337,  338,  339,  340,  341,  332,  330,  331,  342,  330,  331,
	  343,  330,  331,  344,  330,  331,  345,  330,  331,  346,  330,  331,
	  347,  330,  331,  348,  330,  331,  349,  330,  331,  350,  330,  331,
	  351,  330,  331,  352,  330,  331,  353,  330,  331,  354,  330,  331,
	  355,  330,  331,  356,  330,  331,  357,  358,  330,  331,  359,  330,
	  331,  360,  330,  331,  361,  330,  331,  362,  330,  331,  363,  330,
	  331,  364,  330,  365,  331,  366,  330,  366,  331,  330,  331,  367,
	  330,  331,  368,  330,  331,  369,  330,  331,  370,  330,  331,  371,
	  330,  331,  356,  330,  331,  372,  330,  373,  331,  374,  330,  374,
	  331,  330,  331,  375,  330,  331,  376,  330,  331,  371,  330,  331,
	  377,  378,  330,  331,  379,  330,  331,  380,  380,  330,  331,  356,
	  381,  330,  331,  382,  330,  331,  383,  330,  331,  384,  330,  331,
	  385,  330,  331,  386,  330,  387,  331,  388,  330,  389,  331,  330,
	  390,  331,  330,  391,  331,  330,  331,  392,  330,  331,  393,  330,
	  331,  394,  330,  331,  395,  330,  331,  396,  330,  331,  397,  330,
	  331,  398,  330,  331,  399,  330,  373,  331,  330,  331,  400,  330,
	  331,  401,  330,  331,  402,  330,  331,  403,  330,  331,  404,  330,
	  331,  405,  330,  331,  406,  330,  331,  407,  330,  331,  408,  330,
	  331,  374,  330,  331,  356,  409,  410,  330,  331,  411,  330,  412,
	  331,  413,  330,  413,  331,  330,  331,  381,  330,  331,  414,  330,
	  331,  415,  330,  331,  416,  330,  331,  417,  330,  331,  418,  330,
	  331,  419,  330,  331,  420,  330,  331,  421,  330,  331,  422,  330,
	  331,  423,  330,  331,  358,  330,  331,  424,  330,  331,  425,  330,
	  331,  426,  330,  331,  427,  330,  331,  428,  330,  331,  429,  330,
	  331,  430,  330,  331,  431,  330,  331,  432,  330,  331,  433,  330,
	  331,  434,  330,  331,  435,  330,  331,  371,  330,  331,  436,  330,
	  331,  381,  330,  331,  437,  330,  331,  438,  330,  331,  439,  330,
	  331,  413,  330,  440,    0,  146,    0,  441,    0,  442,    0,  443,
	    0,  258,    0,  444,  445,  444,    0,  448,  447,  449,  450,  447,
	  446,    0,  452,  453,  451,    0,  452,  451,  448,  454,  452,  453,
	  454,  451,  448,  455,  456,  457,  458,  459,  460,  461,  462,  463,
	  464,  465,  466,  467,  455,    0,   89,  468,   88,  469,   89,  470,
	   88,  470,   89,   88,   89,  471,   88,   89,  472,   88,   89,  473,
	   88,   89,  474,  127,  126,   88,   89,  475,   88,   89,  476,   88,
	   89,  477,   88,   89,  478,   88,   89,  479,   88,   89,  480,   88,
	   89,  481,   88,   89,  126,   88,   89,  482,   88,   89,  483,   88,
	   89,  484,   88,   89,  485,   88,   89,  481,   88,   89,  486,   88,
	   89,  487,   88,   89,  488,   88,   89,  489,   88,   89,  490,   88,
	   89,  491,   88,  492,   89,  493,   88,  494,   89,   88,  495,   89,
	   88,  496,   89,   88,   89,  497,   88,   89,  498,   88,   89,  499,
	   88,   89,  500,   88,   89,  501,   88,   89,  502,   88,   89,  503,
	   88,   89,  504,   88,  505,   89,   88,  506,   89,   88,   89,  507,
	   88,   89,  481,   88,   89,  508,   88,   89,  509,   88,   89,  510,
	   88,   89,  511,   88,   89,  512,   88,   89,  513,   88,   89,  514,
	   88,   89,  515,   88,   89,  516,   88,   89,  506,   88,   89,  517,
	  518,   88,   89,  519,   88,   89,  520,   88,   89,  521,   88,   89,
	  522,   88,   89,  523,   88,   89,  524,   88,   89,  525,   88,   89,
	  526,   88,   89,  527,   88,   89,  528,   88,   89,  529,   88,   89,
	  530,   88,  505,   89,  506,   88,   89,  531,   88,   89,  532,   88,
	   89,  533,   88,   89,  534,   88,   89,  535,   88,   89,  126,   88,
	   89,  536,   88,   89,  537,   88,   89,  538,  481,   88,   89,  539,
	   88,   89,  540,   88,   89,  541,   88,   89,  542,   88,   89,  543,
	   88,   89,  544,   88,   89,  545,   88,   89,  546,   88,   89,  547,
	   88,   89,  126,   88,  548,    0,  549,  550,    0,  550,    0,  551,
	    0,  552,    0,  553,    0,  554,  555,  276,    0,  556,    0,  557,
	    0,  558,    0,  559,    0,  560,    0,  561,    0,  316,    0,  563,
	  562,  565,  564,  565,  566,  567,  568,  569,  567,  570,  571,  572,
	  573,  574,  575,  566,  564,  565,  576,  564,  565,  577,  564,  565,
	  578,  564,  565,  579,  564,  565,  580,  564,  565,  581,  564,  565,
	  582,  564,  565,  583,  564,  565,  584,  564,  565,  585,  564,  565,
	  586,  564,  565,  587,  564,  565,  588,  564,  565,  589,  564,  565,
	  590,  564,  565,  591,  592,  593,  564,  565,  594,  564,  565,  595,
	  564,  565,  596,  564,  565,  597,  564,  565,  598,  564,  565,  599,
	  564,  600,  565,  601,  564,  601,  565,  564,  565,  602,  564,  565,
	  603,  564,  565,  604,  564,  565,  605,  564,  565,  606,  564,  565,
	  590,  564,  565,  607,  564,  608,  565,  609,  564,  609,  565,  564,
	  565,  610,  564,  565,  611,  564,  565,  612,  564,  565,  613,  590,
	  564,  565,  614,  564,  565,  615,  564,  565,  616,  564,  565,  617,
	  564,  565,  618,  564,  565,  619,  564,  565,  620,  564,  565,  606,
	  564,  565,  621,  564,  565,  622,  564,  565,  623,  564,  565,  624,
	  564,  565,  620,  564,  565,  625,  626,  564,  565,  627,  564,  565,
	  628,  628,  564,  565,  590,  629,  564,  565,  630,  564,  565,  631,
	  564,  565,  632,  564,  565,  633,  564,  565,  634,  564,  635,  565,
	  636,  564,  637,  565,  564,  638,  565,  564,  639,  565,  564,  565,
	  640,  564,  565,  641,  564,  565,  642,  564,  565,  643,  564,  565,
	  644,  564,  565,  645,  564,  565,  646,  564,  565,  647,  564,  648,
	  565,  564,  649,  565,  564,  565,  650,  564,  565,  620,  564,  565,
	  651,  564,  565,  652,  564,  565,  653,  564,  565,  654,  564,  565,
	  655,  564,  565,  656,  564,  565,  657,  564,  565,  658,  564,  565,
	  659,  564,  565,  649,  564,  565,  590,  660,  661,  564,  565,  662,
	  564,  663,  565,  664,  564,  664,  565,  564,  565,  629,  564,  565,
	  665,  564,  565,  666,  564,  565,  667,  564,  565,  668,  564,  565,
	  669,  564,  565,  670,  564,  565,  671,  564,  565,  672,  564,  565,
	  673,  564,  565,  674,  564,  565,  675,  564,  565,  676,  564,  648,
	  565,  649,  564,  565,  677,  564,  565,  678,  564,  565,  679,  620,
	  564,  565,  680,  564,  565,  681,  564,  565,  682,  564,  565,  683,
	  564,  565,  684,  564,  565,  685,  564,  565,  686,  564,  565,  687,
	  564,  565,  688,  564,  565,  606,  564,  565,  689,  564,  565,  629,
	  564,  565,  690,  564,  565,  691,  564,  565,  692,  564,  565,  664,
	  564,  693,    0,  694,    0,  695,    0,  696,    0,  316,    0,  697,
	    0
	};
}

private static final short _lexer_indicies[] = init__lexer_indicies_0();


private static short[] init__lexer_trans_targs_0()
{
	return new short [] {
	    0,    2,    4,    4,    5,   16,   18,   32,   35,   38,   86,  190,
	  246,  367,  369,  373,    3,    6,    7,    8,    9,    8,    8,    9,
	    8,   10,   10,   10,   11,   10,   10,   10,   11,   12,   13,   14,
	    4,   15,   14,   16,    4,   17,   19,   20,   21,   22,   23,   24,
	   25,   26,   27,   28,   29,   30,   31,  608,   33,   34,    4,   17,
	   34,    4,   17,   36,   37,    4,   36,   35,   37,   39,  464,  603,
	   40,   41,   42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
	   52,   53,   54,   55,   54,   55,   55,    4,   56,   70,  399,  431,
	  451,   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
	   68,   69,    4,   71,  379,  394,   72,   73,   74,   75,   76,   77,
	   78,   79,   80,   81,   82,   83,   84,   85,    4,    4,    5,   16,
	   18,   32,   35,   38,   86,  190,  246,  367,  369,  373,   87,   90,
	   88,   89,   32,   91,   92,   93,   94,   95,   96,  180,   97,   98,
	   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
	  111,  112,  113,  114,  115,  114,  115,  115,    4,  116,  130,  131,
	  152,  156,  161,  174,  176,  117,  118,  119,  120,  121,  122,  123,
	  124,  125,  126,  127,  128,  129,    4,   85,  132,  146,  133,  134,
	  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  147,
	  148,  149,  150,  151,  153,  154,  155,  130,  157,  158,  159,  160,
	  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
	  175,  177,  178,  179,  181,  182,  183,  184,  185,  186,  187,  188,
	  189,  191,  195,  208,  192,  193,  194,  196,  197,  198,  199,  200,
	  201,  202,  203,  204,  205,  206,  207,  209,  210,  211,  212,  213,
	  214,  215,  216,  217,  216,  217,  217,    4,  218,  233,  219,  220,
	  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
	   85,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,
	  245,  247,  248,  249,  259,  250,  251,  252,  253,  254,  255,  256,
	  257,  258,  260,  261,  262,  263,  262,  263,  263,    4,  264,  278,
	  279,  300,  332,  348,  361,  363,  265,  266,  267,  268,  269,  270,
	  271,  272,  273,  274,  275,  276,  277,    4,   85,  280,  294,  281,
	  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,
	  295,  296,  297,  298,  299,  301,  304,  302,  303,  278,  305,  306,
	  307,  308,  309,  310,  322,  311,  312,  313,  314,  315,  316,  317,
	  318,  319,  320,  321,  323,  324,  325,  326,  327,  328,  329,  330,
	  331,  333,  337,  334,  335,  336,  338,  339,  340,  341,  342,  343,
	  344,  345,  346,  347,  349,  350,  351,  352,  353,  354,  355,  356,
	  357,  358,  359,  360,  362,  364,  365,  366,  368,  370,  371,  372,
	  373,  374,  375,  377,  378,  376,  374,  375,  376,  374,  377,  378,
	    5,   16,   18,   32,   35,   38,   86,  190,  246,  367,  369,  373,
	  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,
	  392,  393,  395,  396,  397,  398,  400,  401,  402,  403,  404,  405,
	  406,  421,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
	  417,  418,  419,  420,  422,  423,  424,  425,  426,  427,  428,  429,
	  430,  432,  445,  433,  434,  435,  436,  437,  438,  439,  440,  441,
	  442,  443,  444,  446,  447,  448,  449,  450,  452,  453,  454,  455,
	  456,  457,  458,  459,  460,  461,  462,  463,  465,  466,  467,  468,
	  469,  470,  471,  478,  472,  473,  474,  475,  476,  477,  479,  480,
	  479,  480,  480,    4,  481,  495,  496,  531,  566,  584,  597,  599,
	  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,  493,
	  494,    4,   85,  497,  511,  526,  498,  499,  500,  501,  502,  503,
	  504,  505,  506,  507,  508,  509,  510,  512,  513,  514,  515,  516,
	  517,  518,  519,  520,  521,  522,  523,  524,  525,  527,  528,  529,
	  530,  532,  535,  533,  534,  495,  536,  537,  538,  539,  540,  541,
	  556,  542,  543,  544,  545,  546,  547,  548,  549,  550,  551,  552,
	  553,  554,  555,  557,  558,  559,  560,  561,  562,  563,  564,  565,
	  567,  571,  568,  569,  570,  572,  573,  574,  575,  576,  577,  578,
	  579,  580,  581,  582,  583,  585,  586,  587,  588,  589,  590,  591,
	  592,  593,  594,  595,  596,  598,  600,  601,  602,  604,  605,  606,
	  607,    0
	};
}

private static final short _lexer_trans_targs[] = init__lexer_trans_targs_0();


private static short[] init__lexer_trans_actions_0()
{
	return new short [] {
	   43,    0,    0,   54,    3,    1,    0,   29,    1,   29,   29,   29,
	   29,   29,   29,   35,    0,    0,    0,    7,  139,   48,    0,  102,
	    9,    5,   45,  134,   45,    0,   33,  122,   33,   33,    0,   11,
	  106,    0,    0,    0,  114,   25,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  149,  126,
	    0,  110,   23,    0,   27,  118,   27,   51,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   69,   33,   84,   84,   84,
	   84,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   13,   31,  130,   60,   57,
	   31,   63,   57,   63,   63,   63,   63,   63,   63,   66,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   57,  144,    0,   54,    0,   78,   33,   84,   84,
	   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,   19,   19,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   57,  144,    0,   54,    0,   81,   84,   84,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	   21,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   57,  144,    0,   54,    0,   72,   33,   84,
	   84,   84,   84,   84,   84,   84,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,   15,   15,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   37,   37,   54,   37,   87,    0,    0,   39,    0,    0,
	   93,   90,   41,   96,   90,   96,   96,   96,   96,   96,   96,   99,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   57,  144,
	    0,   54,    0,   75,   33,   84,   84,   84,   84,   84,   84,   84,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,   17,   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0
	};
}

private static final short _lexer_trans_actions[] = init__lexer_trans_actions_0();


private static short[] init__lexer_eof_actions_0()
{
	return new short [] {
	    0,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
	   43,   43,   43,   43,   43,   43,   43,   43,   43
	};
}

private static final short _lexer_eof_actions[] = init__lexer_eof_actions_0();


static final int lexer_start = 1;
static final int lexer_first_final = 608;

static final int lexer_en_main = 1;


// line 159 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"

  public void scan(String source)  {
    String input = source + "\n%_FEATURE_END_%";
    byte[] data = null;
    try {
      data = input.getBytes("UTF-8");
    } catch(UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    int cs, p = 0, pe = data.length;
    int eof = pe;

    int lineNumber = 1;
    int lastNewline = 0;

    int contentStart = -1;
    int currentLine = -1;
    int docstringContentTypeStart = -1;
    int docstringContentTypeEnd = -1;
    int startCol = -1;
    int nextKeywordStart = -1;
    int keywordStart = -1;
    String keyword = null;
    List<String> currentRow = null;

    
// line 799 "java/src/main/java/gherkin/lexer/Pt.java"
	{
	cs = lexer_start;
	}

// line 185 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
    
// line 806 "java/src/main/java/gherkin/lexer/Pt.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _lexer_key_offsets[cs];
	_trans = _lexer_index_offsets[cs];
	_klen = _lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _lexer_indicies[_trans];
	cs = _lexer_trans_targs[_trans];

	if ( _lexer_trans_actions[_trans] != 0 ) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = (int) _lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _lexer_actions[_acts++] )
			{
	case 0:
// line 16 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      contentStart = p;
      currentLine = lineNumber;
      if(keyword != null) {
        startCol = p - lastNewline - (keyword.length() + 1);
      }
    }
	break;
	case 1:
// line 24 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      currentLine = lineNumber;
      startCol = p - lastNewline;
    }
	break;
	case 2:
// line 29 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      contentStart = p;
    }
	break;
	case 3:
// line 33 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      docstringContentTypeStart = p;
    }
	break;
	case 4:
// line 37 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      docstringContentTypeEnd = p;
    }
	break;
	case 5:
// line 41 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String con = unindent(startCol, substring(data, contentStart, nextKeywordStart-1).replaceFirst("(\\r?\\n)?([\\t ])*\\Z", "").replace("\\\"\\\"\\\"", "\"\"\""));
      String conType = substring(data, docstringContentTypeStart, docstringContentTypeEnd).trim();
      listener.docString(conType, con, currentLine);
    }
	break;
	case 6:
// line 47 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.feature(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 7:
// line 54 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.background(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 8:
// line 61 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenario(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 9:
// line 68 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.scenarioOutline(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 10:
// line 75 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String[] nameDescription = nameAndUnindentedDescription(startCol, keywordContent(data, p, eof, nextKeywordStart, contentStart));
      listener.examples(keyword, nameDescription[0], nameDescription[1], currentLine);
      if(nextKeywordStart != -1) p = nextKeywordStart - 1;
      nextKeywordStart = -1;
    }
	break;
	case 11:
// line 82 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.step(keyword, substring(data, contentStart, p).trim(), currentLine);
    }
	break;
	case 12:
// line 86 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.comment(substring(data, contentStart, p).trim(), lineNumber);
      keywordStart = -1;
    }
	break;
	case 13:
// line 91 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.tag(substring(data, contentStart, p).trim(), currentLine);
      keywordStart = -1;
    }
	break;
	case 14:
// line 96 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      lineNumber++;
    }
	break;
	case 15:
// line 100 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      lastNewline = p + 1;
    }
	break;
	case 16:
// line 104 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      if(keywordStart == -1) keywordStart = p;
    }
	break;
	case 17:
// line 108 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      keyword = substring(data, keywordStart, p).replaceFirst(":$","");
      keywordStart = -1;
    }
	break;
	case 18:
// line 113 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      nextKeywordStart = p;
    }
	break;
	case 19:
// line 117 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      p = p - 1;
      currentRow = new ArrayList<String>();
      currentLine = lineNumber;
    }
	break;
	case 20:
// line 123 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      contentStart = p;
    }
	break;
	case 21:
// line 127 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      String con = substring(data, contentStart, p).trim();
      currentRow.add(con
        .replace("\\|", "|")
        .replace("\\n", "\n")
        .replace("\\\\", "\\")
      );
    }
	break;
	case 22:
// line 136 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      listener.row(currentRow, currentLine);
    }
	break;
	case 23:
// line 140 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1067 "java/src/main/java/gherkin/lexer/Pt.java"
			}
		}
	}

case 2:
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _lexer_eof_actions[cs];
	int __nacts = (int) _lexer_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _lexer_actions[__acts++] ) {
	case 23:
// line 140 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
	{
      if(cs < lexer_first_final) {
        String content = currentLineContent(data, lastNewline);
        throw new LexingError("Lexing error on line " + lineNumber + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.");
      } else {
        listener.eof();
      }
    }
	break;
// line 1099 "java/src/main/java/gherkin/lexer/Pt.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 186 "/home/rob/dev/ws/ruby/gherkin/tasks/../ragel/i18n/pt.java.rl"
  }

  private String keywordContent(byte[] data, int p, int eof, int nextKeywordStart, int contentStart) {
    int endPoint = (nextKeywordStart == -1 || (p == eof)) ? p : nextKeywordStart;
    return substring(data, contentStart, endPoint);
  }

  private String[] nameAndUnindentedDescription(int startCol, String text) {
    String[] lines = text.split("\n");
    String name = lines.length > 0 ? lines[0].trim() : "";
    StringBuffer description = new StringBuffer();
    for(int i = 1; i < lines.length; i++) {
      description.append(lines[i]);
      description.append("\n");
    }
    return new String[]{name, unindent(startCol+2, description.toString()).replaceAll("\\s+$", "")};
  }

  private String unindent(int startCol, String text) {
    return Pattern.compile("^[\t ]{0," + startCol + "}", Pattern.MULTILINE).matcher(text).replaceAll("");
  }

  private String currentLineContent(byte[] data, int lastNewline) {
    return substring(data, lastNewline, data.length).trim();
  }

  private String substring(byte[] data, int start, int end) {
    try {
      return new String(data, start, end-start, "utf-8");
    } catch(java.io.UnsupportedEncodingException e) {
      throw new RuntimeException("Internal error", e);
    }
  }
}
