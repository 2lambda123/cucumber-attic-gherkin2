# Autogenerated from a Treetop grammar. Edits may be lost.


require 'treetop'
require 'treetop/runtime'
require 'treetop/ruby_extensions'

require 'tt/feature'
require 'tt/table'

module Cucumber
  module Parser
    module I18n
      module En
        include Treetop::Runtime

        def root
          @root || :feature
        end

        include Feature

        include Table

        def _nt_feature
          start_index = index
          if node_cache[:feature].has_key?(index)
            cached = node_cache[:feature][index]
            @index = cached.interval.end if cached
            return cached
          end

          r0 = _nt_feature_sub

          node_cache[:feature][start_index] = r0

          r0
        end

        module BackgroundKeyword0
        end

        def _nt_background_keyword
          start_index = index
          if node_cache[:background_keyword].has_key?(index)
            cached = node_cache[:background_keyword][index]
            @index = cached.interval.end if cached
            return cached
          end

          i0, s0 = index, []
          if has_terminal?("Background", false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
            @index += 10
          else
            terminal_parse_failure("Background")
            r1 = nil
          end
          s0 << r1
          if r1
            if has_terminal?(':', false, index)
              r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r2 = nil
            end
            s0 << r2
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(BackgroundKeyword0)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:background_keyword][start_index] = r0

          r0
        end

        module ScenarioKeyword0
        end

        def _nt_scenario_keyword
          start_index = index
          if node_cache[:scenario_keyword].has_key?(index)
            cached = node_cache[:scenario_keyword][index]
            @index = cached.interval.end if cached
            return cached
          end

          i0, s0 = index, []
          if has_terminal?("Scenario", false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
            @index += 8
          else
            terminal_parse_failure("Scenario")
            r1 = nil
          end
          s0 << r1
          if r1
            if has_terminal?(':', false, index)
              r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r2 = nil
            end
            s0 << r2
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(ScenarioKeyword0)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:scenario_keyword][start_index] = r0

          r0
        end

        module ScenarioOutlineKeyword0
        end

        def _nt_scenario_outline_keyword
          start_index = index
          if node_cache[:scenario_outline_keyword].has_key?(index)
            cached = node_cache[:scenario_outline_keyword][index]
            @index = cached.interval.end if cached
            return cached
          end

          i0, s0 = index, []
          if has_terminal?("Scenario Outline", false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 16))
            @index += 16
          else
            terminal_parse_failure("Scenario Outline")
            r1 = nil
          end
          s0 << r1
          if r1
            if has_terminal?(':', false, index)
              r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r2 = nil
            end
            s0 << r2
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(ScenarioOutlineKeyword0)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:scenario_outline_keyword][start_index] = r0

          r0
        end

        def _nt_step_keyword
          start_index = index
          if node_cache[:step_keyword].has_key?(index)
            cached = node_cache[:step_keyword][index]
            @index = cached.interval.end if cached
            return cached
          end

          i0 = index
          if has_terminal?("Given", false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure("Given")
            r1 = nil
          end
          if r1
            r0 = r1
          else
            if has_terminal?("When", false, index)
              r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure("When")
              r2 = nil
            end
            if r2
              r0 = r2
            else
              if has_terminal?("Then", false, index)
                r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
                @index += 4
              else
                terminal_parse_failure("Then")
                r3 = nil
              end
              if r3
                r0 = r3
              else
                if has_terminal?("And", false, index)
                  r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure("And")
                  r4 = nil
                end
                if r4
                  r0 = r4
                else
                  if has_terminal?("But", false, index)
                    r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure("But")
                    r5 = nil
                  end
                  if r5
                    r0 = r5
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end

          node_cache[:step_keyword][start_index] = r0

          r0
        end

        def _nt_keyword_space
          start_index = index
          if node_cache[:keyword_space].has_key?(index)
            cached = node_cache[:keyword_space][index]
            @index = cached.interval.end if cached
            return cached
          end

          if has_terminal?('space+', false, index)
            r0 = instantiate_node(SyntaxNode,input, index...(index + 6))
            @index += 6
          else
            terminal_parse_failure('space+')
            r0 = nil
          end

          node_cache[:keyword_space][start_index] = r0

          r0
        end

        module ExamplesKeyword0
        end

        def _nt_examples_keyword
          start_index = index
          if node_cache[:examples_keyword].has_key?(index)
            cached = node_cache[:examples_keyword][index]
            @index = cached.interval.end if cached
            return cached
          end

          i0, s0 = index, []
          if has_terminal?("Examples", false, index)
            r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
            @index += 8
          else
            terminal_parse_failure("Examples")
            r1 = nil
          end
          s0 << r1
          if r1
            if has_terminal?(':', false, index)
              r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r3 = nil
            end
            if r3
              r2 = r3
            else
              r2 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r2
          end
          if s0.last
            r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
            r0.extend(ExamplesKeyword0)
          else
            @index = i0
            r0 = nil
          end

          node_cache[:examples_keyword][start_index] = r0

          r0
        end

      end

      class EnParser < Treetop::Runtime::CompiledParser
        include En
      end

    end
  end
end
